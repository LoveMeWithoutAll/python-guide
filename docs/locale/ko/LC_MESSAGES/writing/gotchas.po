# 
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-30 22:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../writing/gotchas.rst:2
msgid "Common Gotchas"
msgstr ""

#: ../../writing/gotchas.rst:4
msgid ""
"For the most part, Python aims to be a clean and consistent language that "
"avoids surprises. However, there are a few cases that can be confusing to "
"newcomers."
msgstr ""

#: ../../writing/gotchas.rst:8
msgid ""
"Some of these cases are intentional but can be potentially surprising. Some "
"could arguably be considered language warts. In general though, what follows"
" is a collection of potentially tricky behavior that might seem strange at "
"first glance, but is generally sensible once you're aware of the underlying "
"cause for the surprise."
msgstr ""

#: ../../writing/gotchas.rst:17
msgid "Mutable Default Arguments"
msgstr ""

#: ../../writing/gotchas.rst:19
msgid ""
"Seemingly the *most* common surprise new Python programmers encounter is "
"Python's treatment of mutable default arguments in function definitions."
msgstr ""

#: ../../writing/gotchas.rst:23 ../../writing/gotchas.rst:94
msgid "What You Wrote"
msgstr ""

#: ../../writing/gotchas.rst:32 ../../writing/gotchas.rst:102
msgid "What You Might Have Expected to Happen"
msgstr ""

#: ../../writing/gotchas.rst:42
msgid ""
"A new list is created each time the function is called if a second argument "
"isn't provided, so that the output is::"
msgstr ""

#: ../../writing/gotchas.rst:49 ../../writing/gotchas.rst:119
msgid "What Does Happen"
msgstr ""

#: ../../writing/gotchas.rst:56
msgid ""
"A new list is created *once* when the function is defined, and the same list"
" is used in each successive call."
msgstr ""

#: ../../writing/gotchas.rst:59
msgid ""
"Python's default arguments are evaluated *once* when the function is "
"defined, not each time the function is called (like it is in say, Ruby). "
"This means that if you use a mutable default argument and mutate it, you "
"*will* and have mutated that object for all future calls to the function as "
"well."
msgstr ""

#: ../../writing/gotchas.rst:65 ../../writing/gotchas.rst:157
msgid "What You Should Do Instead"
msgstr ""

#: ../../writing/gotchas.rst:67
msgid ""
"Create a new object each time the function is called, by using a default arg"
" to signal that no argument was provided (:py:data:`None` is often a good "
"choice)."
msgstr ""

#: ../../writing/gotchas.rst:80 ../../writing/gotchas.rst:180
msgid "When the Gotcha Isn't a Gotcha"
msgstr ""

#: ../../writing/gotchas.rst:82
msgid ""
"Sometimes you can specifically \"exploit\" (read: use as intended) this "
"behavior to maintain state between calls of a function. This is often done "
"when writing a caching function."
msgstr ""

#: ../../writing/gotchas.rst:88
msgid "Late Binding Closures"
msgstr ""

#: ../../writing/gotchas.rst:90
msgid ""
"Another common source of confusion is the way Python binds its variables in "
"closures (or in the surrounding global scope)."
msgstr ""

#: ../../writing/gotchas.rst:109
msgid ""
"A list containing five functions that each have their own closed-over ``i`` "
"variable that multiplies their argument, producing::"
msgstr ""

#: ../../writing/gotchas.rst:129
msgid ""
"Five functions are created; instead all of them just multiply ``x`` by 4."
msgstr ""

#: ../../writing/gotchas.rst:131
msgid ""
"Python's closures are *late binding*. This means that the values of "
"variables used in closures are looked up at the time the inner function is "
"called."
msgstr ""

#: ../../writing/gotchas.rst:135
msgid ""
"Here, whenever *any* of the returned functions are called, the value of "
"``i`` is looked up in the surrounding scope at call time. By then, the loop "
"has completed and ``i`` is left with its final value of 4."
msgstr ""

#: ../../writing/gotchas.rst:139
msgid ""
"What's particularly nasty about this gotcha is the seemingly prevalent "
"misinformation that this has something to do with :ref:`lambdas "
"<python:lambda>` in Python. Functions created with a ``lambda`` expression "
"are in no way special, and in fact the same exact behavior is exhibited by "
"just using an ordinary ``def``:"
msgstr ""

#: ../../writing/gotchas.rst:159
msgid ""
"The most general solution is arguably a bit of a hack. Due to Python's "
"aforementioned behavior concerning evaluating default arguments to functions"
" (see :ref:`default_args`), you can create a closure that binds immediately "
"to its arguments by using a default arg like so:"
msgstr ""

#: ../../writing/gotchas.rst:169
msgid "Alternatively, you can use the functools.partial function:"
msgstr ""

#: ../../writing/gotchas.rst:182
msgid ""
"Sometimes you want your closures to behave this way. Late binding is good in"
" lots of situations. Looping to create unique functions is unfortunately a "
"case where they can cause hiccups."
msgstr ""
