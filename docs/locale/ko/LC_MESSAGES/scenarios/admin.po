# 
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-30 22:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\scenarios\admin.rst:2
msgid "Systems Administration"
msgstr ""

#: ..\..\scenarios\admin.rst:5
msgid "Fabric"
msgstr ""

#: ..\..\scenarios\admin.rst:7
msgid ""
"`Fabric <http://docs.fabfile.org>`_ is a library for simplifying system "
"administration tasks. While Chef and Puppet tend to focus on managing "
"servers and system libraries, Fabric is more focused on application level "
"tasks such as deployment."
msgstr ""

#: ..\..\scenarios\admin.rst:12
msgid "Install Fabric:"
msgstr ""

#: ..\..\scenarios\admin.rst:18
msgid ""
"The following code will create two tasks that we can use: ``memory_usage`` "
"and ``deploy``. The former will output the memory usage on each machine. The"
" latter will ssh into each server, cd to our project directory, activate the"
" virtual environment, pull the newest codebase, and restart the application "
"server."
msgstr ""

#: ..\..\scenarios\admin.rst:41
msgid ""
"With the previous code saved in a file named :file:`fabfile.py`, we can "
"check memory usage with:"
msgstr ""

#: ..\..\scenarios\admin.rst:61
msgid "and we can deploy with:"
msgstr ""

#: ..\..\scenarios\admin.rst:67
msgid ""
"Additional features include parallel execution, interaction with remote "
"programs, and host grouping."
msgstr ""

#: ..\..\scenarios\admin.rst:70
msgid "`Fabric Documentation <http://docs.fabfile.org>`_"
msgstr ""

#: ..\..\scenarios\admin.rst:73
msgid "Salt"
msgstr ""

#: ..\..\scenarios\admin.rst:75
msgid ""
"`Salt <http://saltstack.org/>`_ is an open source infrastructure management "
"tool. It supports remote command execution from a central point (master "
"host) to multiple hosts (minions). It also supports system states which can "
"be used to configure multiple servers using simple template files."
msgstr ""

#: ..\..\scenarios\admin.rst:80
msgid ""
"Salt supports Python versions 2.6 and 2.7 and can be installed via pip:"
msgstr ""

#: ..\..\scenarios\admin.rst:86
msgid ""
"After configuring a master server and any number of minion hosts, we can run"
" arbitrary shell commands or use pre-built modules of complex commands on "
"our minions."
msgstr ""

#: ..\..\scenarios\admin.rst:89
msgid ""
"The following command lists all available minion hosts, using the ping "
"module."
msgstr ""

#: ..\..\scenarios\admin.rst:95
msgid ""
"The host filtering is accomplished by matching the minion id, or using the "
"grains system. The `grains "
"<http://docs.saltstack.org/en/latest/topics/targeting/grains.html>`_ system "
"uses static host information like the operating system version or the CPU "
"architecture to provide a host taxonomy for the Salt modules."
msgstr ""

#: ..\..\scenarios\admin.rst:100
msgid ""
"The following command lists all available minions running CentOS using the "
"grains system:"
msgstr ""

#: ..\..\scenarios\admin.rst:106
msgid ""
"Salt also provides a state system. States can be used to configure the "
"minion hosts."
msgstr ""

#: ..\..\scenarios\admin.rst:108
msgid ""
"For example, when a minion host is ordered to read the following state file,"
" it will install and start the Apache server:"
msgstr ""

#: ..\..\scenarios\admin.rst:122
msgid ""
"State files can be written using YAML, the Jinja2 template system or pure "
"Python."
msgstr ""

#: ..\..\scenarios\admin.rst:124
msgid "`Salt Documentation <http://docs.saltstack.com>`_"
msgstr ""

#: ..\..\scenarios\admin.rst:128
msgid "Psutil"
msgstr ""

#: ..\..\scenarios\admin.rst:130
msgid ""
"`Psutil <https://code.google.com/p/psutil/>`_ is an interface to different "
"system information (e.g. CPU, memory, disks, network, users and processes)."
msgstr ""

#: ..\..\scenarios\admin.rst:133
msgid ""
"Here is an example to be aware of some server overload. If any of the tests "
"(net, CPU) fail, it will send an email."
msgstr ""

#: ..\..\scenarios\admin.rst:179
msgid ""
"A full terminal application like a widely extended top which is based on "
"psutil and with the ability of a client-server monitoring is `glance "
"<https://github.com/nicolargo/glances/>`_."
msgstr ""

#: ..\..\scenarios\admin.rst:184
msgid "Ansible"
msgstr ""

#: ..\..\scenarios\admin.rst:186
msgid ""
"`Ansible <http://ansible.com/>`_  is an open source system automation tool. "
"The biggest advantage over Puppet or Chef is it does not require an agent on"
" the client machine. Playbooks are Ansibleâ€™s configuration, deployment, and "
"orchestration language and are written in in YAML with Jinja2 for "
"templating."
msgstr ""

#: ..\..\scenarios\admin.rst:191
msgid ""
"Ansible supports Python versions 2.6 and 2.7 and can be installed via pip:"
msgstr ""

#: ..\..\scenarios\admin.rst:197
msgid ""
"Ansible requires an inventory file that describes the hosts to which it has "
"access. Below is an example of a host and playbook that will ping all the "
"hosts in the inventory file."
msgstr ""

#: ..\..\scenarios\admin.rst:201
msgid "Here is an example inventory file: :file:`hosts.yml`"
msgstr ""

#: ..\..\scenarios\admin.rst:209
msgid "Here is an example playbook: :file:`ping.yml`"
msgstr ""

#: ..\..\scenarios\admin.rst:221
msgid "To run the playbook:"
msgstr ""

#: ..\..\scenarios\admin.rst:227
msgid ""
"The Ansible playbook will ping all of the servers in the :file:`hosts.yml` "
"file. You can also select groups of servers using Ansible. For more "
"information about Ansible, read the `Ansible Docs "
"<http://docs.ansible.com/>`_."
msgstr ""

#: ..\..\scenarios\admin.rst:233
msgid "Chef"
msgstr ""

#: ..\..\scenarios\admin.rst:235
msgid "Write about Chef"
msgstr ""

#: ..\..\scenarios\admin.rst:237
msgid ""
"`Chef Documentation <http://wiki.opscode.com/display/chef/Documentation>`_"
msgstr ""

#: ..\..\scenarios\admin.rst:241
msgid "Puppet"
msgstr ""

#: ..\..\scenarios\admin.rst:243
msgid ""
"`Puppet <http://puppetlabs.com>`_ is an IT Automation and configuration "
"management software from Puppet Labs that allows System Administrators to "
"define the state of their IT Infrastructure, thereby providing an elegant "
"way to manage their fleet of physical and virtual machines."
msgstr ""

#: ..\..\scenarios\admin.rst:248
msgid ""
"Puppet is available both as an Open Source and an Enterprise variant. "
"Modules are small,shareable units of code written to automate or define the "
"state of a system. `Puppet Forge <https://forge.puppetlabs.com/>`_ is a "
"repository for modules written by the community for Open Source and "
"Enterprise Puppet."
msgstr ""

#: ..\..\scenarios\admin.rst:253
msgid ""
"Puppet Agents are installed on nodes whose state needs to be monitored or "
"changed. A desginated server known as the Puppet Master is responsible for "
"orchastrating the agent nodes."
msgstr ""

#: ..\..\scenarios\admin.rst:257
msgid ""
"Agent nodes send basic facts about the system such as to the operating "
"system, kernel, architecture, ip address, hostname etc. to the Puppet "
"Master. The Puppet Master then compiles a catalog with information provided "
"by the agents on how each node should be configured and sends it to the "
"agent. The agent enforces the change as prescribed in the catalog and sends "
"a report back to the Puppet Master."
msgstr ""

#: ..\..\scenarios\admin.rst:263
msgid ""
"Facter is an interesting tool that ships with Puppet that pulls basic facts "
"about the System. These facts can be referenced as a variable while writing "
"your Puppet modules."
msgstr ""

#: ..\..\scenarios\admin.rst:276
msgid ""
"Writing Modules in Puppet is pretty straight forward. Puppet Manifests "
"together form Puppet Modules. Puppet manifest end with an extension of "
"``.pp``. Here is an example of 'Hello World' in Puppet."
msgstr ""

#: ..\..\scenarios\admin.rst:288
msgid ""
"Here is another example with system based logic. Note how the "
"operatingsystem fact is being used as a variable prepended with the ``$`` "
"sign. Similarly, this holds true for other facts such as hostname which can "
"be referenced by ``$hostname``"
msgstr ""

#: ..\..\scenarios\admin.rst:301
msgid ""
"There are several resource types for Puppet but the package-file-service "
"paradigm is all you need for undertaking majority of the configuration "
"management. The following Puppet code makes sure that the OpenSSH-Server "
"package is installed in a system and the sshd service is notified to restart"
" everytime the sshd configuration file is changed."
msgstr ""

#: ..\..\scenarios\admin.rst:331
msgid ""
"For more information checkout `Puppet Labs Documentation "
"<http://docs.puppetlabs.com>`_"
msgstr ""

#: ..\..\scenarios\admin.rst:334
msgid "Blueprint"
msgstr ""

#: ..\..\scenarios\admin.rst:336
msgid "Write about Blueprint"
msgstr ""

#: ..\..\scenarios\admin.rst:339
msgid "Buildout"
msgstr ""

#: ..\..\scenarios\admin.rst:341
msgid "Write about Buildout"
msgstr ""

#: ..\..\scenarios\admin.rst:343
msgid "`Buildout Website <http://www.buildout.org>`_"
msgstr ""

#: ..\..\scenarios\admin.rst:0 ..\..\scenarios\admin.rst:0
#: ..\..\scenarios\admin.rst:0
msgid "Todo"
msgstr ""
