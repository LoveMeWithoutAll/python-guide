# 
msgid ""
msgstr ""
"Project-Id-Version: pythonguide 0.0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-30 22:28\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../scenarios/web.rst:3
msgid "Web Applications"
msgstr ""

#: ../../scenarios/web.rst:5
msgid ""
"As a powerful scripting language adapted to both fast prototyping and bigger"
" projects, Python is widely used in Web applications development."
msgstr ""

#: ../../scenarios/web.rst:10
msgid "Context"
msgstr ""

#: ../../scenarios/web.rst:14
msgid "WSGI"
msgstr ""

#: ../../scenarios/web.rst:16
msgid ""
"The Web Server Gateway Interface (or \"WSGI\" for short) is a standard "
"interface between web servers and Python web application frameworks. By "
"standardizing behavior and communication between web servers and Python web "
"frameworks, WSGI makes it possible to write portable Python web code that "
"can be deployed in any :ref:`WSGI-compliant web server <wsgi-servers-ref>`. "
"WSGI is documented in :pep:`3333`."
msgstr ""

#: ../../scenarios/web.rst:25
msgid "Frameworks"
msgstr ""

#: ../../scenarios/web.rst:27
msgid ""
"Broadly speaking, a web framework consists of a set of libraries and a main "
"handler within which you can build custom code to implement a web "
"application (i.e. an interactive web site). Most web frameworks include "
"patterns and utilities to accomplish at least the following:"
msgstr ""

#: ../../scenarios/web.rst:33
msgid ""
"Matches an incoming HTTP request to a particular piece of Python code to be "
"invoked"
msgstr ""

#: ../../scenarios/web.rst:37
msgid "Encapsulate the information received from or sent to a user's browser"
msgstr ""

#: ../../scenarios/web.rst:40
msgid ""
"Allows for separating Python code implementing an application's logic from "
"the HTML (or other) output that it produces"
msgstr ""

#: ../../scenarios/web.rst:44
msgid ""
"Runs an HTTP server on development machines to enable rapid development; "
"often automatically reloads server-side code when files are updated"
msgstr ""

#: ../../scenarios/web.rst:49
msgid "Django"
msgstr ""

#: ../../scenarios/web.rst:51
msgid ""
"`Django <http://www.djangoproject.com>`_ is a \"batteries included\" web "
"application framework. By providing many utilities and patterns out of the "
"box, Django aims to make it possible to build complex, database-backed web "
"applications quickly, while encouraging best practices in code written using"
" it."
msgstr ""

#: ../../scenarios/web.rst:57
msgid ""
"Django has a large and active community, and many pre-built `re-usable "
"modules <http://djangopackages.com/>`_ that can be incorporated into a new "
"project as-is, or customized to fit your needs."
msgstr ""

#: ../../scenarios/web.rst:61
msgid ""
"There are annual Django conferences `in the United States "
"<http://djangocon.us>`_ and `in Europe <http://djangocon.eu>`_."
msgstr ""

#: ../../scenarios/web.rst:66
msgid "Flask"
msgstr ""

#: ../../scenarios/web.rst:68
msgid ""
"`Flask <http://flask.pocoo.org/>`_ is a \"microframework\" for Python. "
"Rather than aiming to provide everything you could possibly need, Flask "
"implements the most commonly-used core components of a web application "
"framework, like URL routing, request and response objects, and templates. As"
" a user of Flask, it is therefore up to you to choose and integrate other "
"components you may need, such as database access or form generation and "
"validation. For many popular modules, `Extensions "
"<http://flask.pocoo.org/extensions/>`_ may already exist to suit your needs."
msgstr ""

#: ../../scenarios/web.rst:77
msgid ""
"**Support** for flask can best be found in its mailing list. Just shoot an "
"email to flask@librelist.com and reply to the confirmation email."
msgstr ""

#: ../../scenarios/web.rst:82
msgid "Werkzeug"
msgstr ""

#: ../../scenarios/web.rst:84
msgid ""
"`Werkzeug <http://werkzeug.pocoo.org/>`_ is not actually a real framework, "
"but rather a very powerful set of tools for building web applications. It "
"provides URL routing utilities, request and response objects and a basic "
"development server. It is mostly used where users need bigger flexibility "
"for their application that is not commonly found in other web frameworks."
msgstr ""

#: ../../scenarios/web.rst:90
msgid ""
"Support can be found on its `mailing list "
"<http://werkzeug.pocoo.org/community/#mailinglist>`_."
msgstr ""

#: ../../scenarios/web.rst:94
msgid "Tornado"
msgstr ""

#: ../../scenarios/web.rst:95
msgid ""
"`Tornado <http://www.tornadoweb.org/>`_ is a scalable, non-blocking web "
"server and web application framework with a relative simple usage. Tornado "
"is known for its high performance. It was initially developed for "
"`friendfeed <http://friendfeed.com/>`_ , a real time chat and blog system."
msgstr ""

#: ../../scenarios/web.rst:99
msgid ""
"In the Jinja2 template engine example it is used to serve the rendered "
"pages."
msgstr ""

#: ../../scenarios/web.rst:103
msgid "Pyramid"
msgstr ""

#: ../../scenarios/web.rst:105
msgid ""
"`Pyramid <http://www.pylonsproject.org/>`_ lies somewhere between a big "
"framework like Django and the microframeworks: It comes with a lot of "
"libraries and functionality and can thus not be considered lightweight. On "
"the other hand, it does not provide all the functionality Django does. "
"Instead Pyramid brings basic support for most regular tasks and provides a "
"great deal of extensibility. Additionally, Pyramid has a huge focus on "
"complete `documentation "
"<http://docs.pylonsproject.org/en/latest/docs/pyramid.html>`__. As a little "
"extra it comes with the Werkzeug Debugger which allows you to debug a "
"running web application in the browser."
msgstr ""

#: ../../scenarios/web.rst:115
msgid ""
"**Support** can also be found in the `documentation "
"<http://docs.pylonsproject.org/en/latest/index.html#support-desc>`__."
msgstr ""

#: ../../scenarios/web.rst:120
msgid "Web Servers"
msgstr ""

#: ../../scenarios/web.rst:125
msgid "Nginx"
msgstr ""

#: ../../scenarios/web.rst:127
msgid ""
"`Nginx <http://nginx.org/>`_ (pronounced \"engine-x\") is a web server and "
"reverse-proxy for HTTP, SMTP and other protocols. It is known for its high "
"performance, relative simplicity, and compatibility with many application "
"servers (like WSGI servers). It also includes handy features like load-"
"balancing, basic authentication, streaming, and others. Designed to serve "
"high-load websites, Nginx is gradually becoming quite popular."
msgstr ""

#: ../../scenarios/web.rst:138
msgid "WSGI Servers"
msgstr ""

#: ../../scenarios/web.rst:140
msgid ""
"Stand-alone WSGI servers typically use less resources than traditional web "
"servers and provide top performance [3]_."
msgstr ""

#: ../../scenarios/web.rst:146
msgid "Gunicorn"
msgstr ""

#: ../../scenarios/web.rst:148
msgid ""
"`Gunicorn <http://gunicorn.org/>`_ (Green Unicorn) is a WSGI server used to "
"serve Python applications. It is a Python interpretation of the Ruby "
"`Unicorn <http://unicorn.bogomips.org/>`_ server. Unicorn is designed to be "
"lightweight, easy to use, and uses many UNIX idioms. Gunicorn is not "
"designed to face the internet -- it was designed to run behind Nginx which "
"buffers slow requests and takes care of other important considerations. A "
"sample setup for Nginx + Gunicorn can be found in the `Gunicorn help "
"<http://gunicorn.org/index.html#deployment>`_."
msgstr ""

#: ../../scenarios/web.rst:160
msgid "uWSGI"
msgstr ""

#: ../../scenarios/web.rst:162
msgid ""
"`uWSGI <https://uwsgi-docs.readthedocs.org>`_ is a full stack for building "
"hosting services.  In addition to process management, process monitoring, "
"and other functionality, uWSGI acts as an application server for various "
"programming languages and protocols - including Python and WSGI. uWSGI can "
"either be run as a stand-alone web router, or be run behind a full web "
"server (such as Nginx or Apache).  In the latter case, a web server can "
"configure uWSGI and an application's operation over the `uwsgi <https"
"://uwsgi-docs.readthedocs.org/en/latest/Protocol.html>`_ protocol.  uWSGI's "
"web server support allows for dynamically configuring Python, passing "
"environment variables and further tuning.  For full details, see `uWSGI "
"magic variables <https://uwsgi-docs.readthedocs.org/en/latest/Vars.html>`_."
msgstr ""

#: ../../scenarios/web.rst:180
msgid "Server Best Practices"
msgstr ""

#: ../../scenarios/web.rst:182
msgid ""
"The majority of self hosted Python applications today are hosted with a WSGI"
" server such as :ref:`Gunicorn <gunicorn-ref>`, either directly or behind a "
"lightweight web server such as :ref:`nginx <nginx-ref>`."
msgstr ""

#: ../../scenarios/web.rst:186
msgid ""
"The WSGI servers serve the Python applications while the web server handles "
"tasks better suited for it such as static file serving, request routing, "
"DDoS protection, and basic authentication."
msgstr ""

#: ../../scenarios/web.rst:191
msgid "Hosting"
msgstr ""

#: ../../scenarios/web.rst:194
msgid "Platform-as-a-Service"
msgstr ""

#: ../../scenarios/web.rst:196
msgid ""
"Platform-as-a-Service (PaaS) is a type of cloud computing infrastructure "
"which abstracts and manages infrastructure, routing, and scaling of web "
"applications. When using PaaS, application developers can focus on writing "
"application code rather than needing to be concerned with deployment "
"details."
msgstr ""

#: ../../scenarios/web.rst:202
msgid ""
"Most PaaS services offer a command-line interface that developers can use to"
" set up and interrogate configuration, and to deploy new releases of an "
"application to the service."
msgstr ""

#: ../../scenarios/web.rst:206
msgid ""
"PaaS services and their partners offer add-on functionality which is well "
"integrated into the platform, such as database hosting, email services, "
"logging, scheduled and background tasks, billing and payment, etc."
msgstr ""

#: ../../scenarios/web.rst:212
msgid "Heroku"
msgstr ""

#: ../../scenarios/web.rst:214
msgid ""
"`Heroku <http://www.heroku.com/>`_'s `Cedar stack "
"<http://devcenter.heroku.com/articles/cedar>`_ offers first class support "
"for Python 2.7 applications."
msgstr ""

#: ../../scenarios/web.rst:218
msgid ""
"Heroku allows you to run as many Python web applications as you like, 24/7 "
"and free of charge. Heroku is best described as a horizontal scaling "
"platform. They start to charge you once you \"scale\" your application to "
"run on more than one Dyno (abstracted servers) at a time."
msgstr ""

#: ../../scenarios/web.rst:223
msgid ""
"Heroku maintains `articles "
"<https://devcenter.heroku.com/categories/python>`_ on using Python with "
"Heroku as well as `step-by-step instructions "
"<https://devcenter.heroku.com/articles/getting-started-with-python>`_ on how"
" to set up your first application."
msgstr ""

#: ../../scenarios/web.rst:230
msgid "DotCloud"
msgstr ""

#: ../../scenarios/web.rst:232
msgid ""
"`DotCloud <http://www.dotcloud.com/>`_ supports WSGI applications and "
"background/worker tasks natively on their platform. Web applications run "
"Python version 2.6, use :ref:`nginx <nginx-ref>` and :ref:`uWSGI <uwsgi-"
"ref>`, and allow custom configuration of both for advanced users."
msgstr ""

#: ../../scenarios/web.rst:237
msgid ""
"DotCloud uses a custom command-line API client which can work with "
"applications managed in git repositories or any other version control "
"system."
msgstr ""

#: ../../scenarios/web.rst:241
msgid ""
"DotCloud has a free plan with limited database size, and without extra "
"services (caching…)."
msgstr ""

#: ../../scenarios/web.rst:244
msgid ""
"See the `DotCloud documentation on Python "
"<http://docs.dotcloud.com/services/python/>`_ for more information and help "
"getting started."
msgstr ""

#: ../../scenarios/web.rst:250
msgid "Gondor"
msgstr ""

#: ../../scenarios/web.rst:252
msgid ""
"`Gondor <https://gondor.io/>`_ is a PaaS specialized for deploying Django "
"and Pinax applications. Gondor recommends Django version 1.6 and supports "
"any WSGI application on Python version 2.7. Gondor can automatically "
"configure your Django site if you use :file:`local_settings.py` for site-"
"specific configuration information."
msgstr ""

#: ../../scenarios/web.rst:257
msgid ""
"Gondor has a guide on deploying `Django projects "
"<https://gondor.io/support/django/setup/>`_."
msgstr ""

#: ../../scenarios/web.rst:261
msgid "Templating"
msgstr ""

#: ../../scenarios/web.rst:263
msgid ""
"Most WSGI applications are responding to HTTP requests to serve content in "
"HTML or other markup languages. Instead of generating directly textual "
"content from Python, the concept of separation of concerns advises us to use"
" templates. A template engine manages a suite of template files, with a "
"system of hierarchy and inclusion to avoid unnecessary repetition, and is in"
" charge of rendering (generating) the actual content, filling the static "
"content of the templates with the dynamic content generated by the "
"application."
msgstr ""

#: ../../scenarios/web.rst:273
msgid ""
"As template files are sometimes written by designers or front-end "
"developers, it can be difficult to handle increasing complexity."
msgstr ""

#: ../../scenarios/web.rst:277
msgid ""
"Some general good practices apply to the part of the application passing "
"dynamic content to the template engine, and to the templates themselves."
msgstr ""

#: ../../scenarios/web.rst:281
msgid ""
"Template files should be passed only the dynamic content that is needed for "
"rendering the template. Avoid the temptation to pass additional content "
"\"just in case\": it is easier to add some missing variable when needed than"
" to remove a likely unused variable later."
msgstr ""

#: ../../scenarios/web.rst:287
msgid ""
"Many template engines allow for complex statements or assignments in the "
"template itself, and many allow some Python code to be evaluated in the "
"templates. This convenience can lead to uncontrolled increase in complexity,"
" and often make it harder to find bugs."
msgstr ""

#: ../../scenarios/web.rst:293
msgid ""
"It is often necessary to mix JavaScript templates with HTML templates. A "
"sane approach to this design is to isolate the parts where the HTML template"
" passes some variable content to the JavaScript code."
msgstr ""

#: ../../scenarios/web.rst:301
msgid "Jinja2"
msgstr ""

#: ../../scenarios/web.rst:302
msgid ""
"`Jinja2 <http://jinja.pocoo.org/>`_ is a template engine which is similar to"
" the Django template system with some extra features. It is a text-based "
"template language and thus can be used to generate any markup. It allows "
"customization of filters, tags, tests and globals, and unlike the template "
"system implemented in the Django Framework, also allows calling functions. "
"Jinja2 is released under the BSD license."
msgstr ""

#: ../../scenarios/web.rst:309
msgid "Here some important html tags in Jinja2:"
msgstr ""

#: ../../scenarios/web.rst:330
msgid ""
"The next listings is an example of a web site in combination with the "
"tornado web server. Tornado is not very complicate to use."
msgstr ""

#: ../../scenarios/web.rst:371
msgid ""
"The :file:`base.html` file can be used as base for all site pages which are "
"for example implemented in the content block."
msgstr ""

#: ../../scenarios/web.rst:396
msgid ""
"The next listing is our site page (:file:`site.html`) loaded in the Python "
"app which extends :file:`base.html`. The content block is automatically set "
"into the corresponding block in the :file:`base.html` page."
msgstr ""

#: ../../scenarios/web.rst:419
msgid "References"
msgstr ""

#: ../../scenarios/web.rst:420
msgid ""
"`The mod_python project is now officially dead "
"<http://blog.dscpl.com.au/2010/06/modpython-project-is-now-"
"officially.html>`_"
msgstr ""

#: ../../scenarios/web.rst:421
msgid ""
"`mod_wsgi vs mod_python "
"<http://www.modpython.org/pipermail/mod_python/2007-July/024080.html>`_"
msgstr ""

#: ../../scenarios/web.rst:422
msgid ""
"`Benchmark of Python WSGI Servers <http://nichol.as/benchmark-of-python-web-"
"servers>`_"
msgstr ""

#: ../../scenarios/web.rst:34
msgid "URL Routing"
msgstr ""

#: ../../scenarios/web.rst:37
msgid "Request and Response Objects"
msgstr ""

#: ../../scenarios/web.rst:41
msgid "Template Engine"
msgstr ""

#: ../../scenarios/web.rst:46
msgid "Development Web Server"
msgstr ""
